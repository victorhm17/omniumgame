// Mocks generated by Mockito 5.4.6 from annotations
// in omnium_game/test/trivia_game/trivia_game_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:omnium_game/core/models/match_model.dart' as _i3;
import 'package:omnium_game/core/models/question_model.dart' as _i6;
import 'package:omnium_game/features/trivia_game/repositories/trivia_game_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTimestamp_0 extends _i1.SmartFake implements _i2.Timestamp {
  _FakeTimestamp_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMatchModel_1 extends _i1.SmartFake implements _i3.MatchModel {
  _FakeMatchModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TriviaGameRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTriviaGameRepository extends _i1.Mock
    implements _i4.TriviaGameRepository {
  MockTriviaGameRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.QuestionModel>> getQuestionsForMatch({
    int? count = 10,
    String? category,
    String? difficulty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getQuestionsForMatch, [], {
              #count: count,
              #category: category,
              #difficulty: difficulty,
            }),
            returnValue: _i5.Future<List<_i6.QuestionModel>>.value(
              <_i6.QuestionModel>[],
            ),
          )
          as _i5.Future<List<_i6.QuestionModel>>);

  @override
  _i5.Future<void> submitAnswer({
    required String? matchId,
    required String? playerId,
    required String? questionId,
    required int? selectedOptionIndex,
    required bool? isCorrect,
    required int? timeTakenMs,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#submitAnswer, [], {
              #matchId: matchId,
              #playerId: playerId,
              #questionId: questionId,
              #selectedOptionIndex: selectedOptionIndex,
              #isCorrect: isCorrect,
              #timeTakenMs: timeTakenMs,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [QuestionModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionModel extends _i1.Mock implements _i6.QuestionModel {
  MockQuestionModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i7.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  String get text =>
      (super.noSuchMethod(
            Invocation.getter(#text),
            returnValue: _i7.dummyValue<String>(this, Invocation.getter(#text)),
          )
          as String);

  @override
  String get category =>
      (super.noSuchMethod(
            Invocation.getter(#category),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#category),
            ),
          )
          as String);

  @override
  String get difficulty =>
      (super.noSuchMethod(
            Invocation.getter(#difficulty),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#difficulty),
            ),
          )
          as String);

  @override
  List<_i6.OptionModel> get options =>
      (super.noSuchMethod(
            Invocation.getter(#options),
            returnValue: <_i6.OptionModel>[],
          )
          as List<_i6.OptionModel>);

  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);

  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(
            Invocation.method(#toMap, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [MatchModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchModel extends _i1.Mock implements _i3.MatchModel {
  MockMatchModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i7.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  String get player1Id =>
      (super.noSuchMethod(
            Invocation.getter(#player1Id),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#player1Id),
            ),
          )
          as String);

  @override
  String get status =>
      (super.noSuchMethod(
            Invocation.getter(#status),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#status),
            ),
          )
          as String);

  @override
  _i2.Timestamp get createdAt =>
      (super.noSuchMethod(
            Invocation.getter(#createdAt),
            returnValue: _FakeTimestamp_0(this, Invocation.getter(#createdAt)),
          )
          as _i2.Timestamp);

  @override
  _i2.Timestamp get updatedAt =>
      (super.noSuchMethod(
            Invocation.getter(#updatedAt),
            returnValue: _FakeTimestamp_0(this, Invocation.getter(#updatedAt)),
          )
          as _i2.Timestamp);

  @override
  bool get isFriendMatch =>
      (super.noSuchMethod(Invocation.getter(#isFriendMatch), returnValue: false)
          as bool);

  @override
  Map<String, int> get scores =>
      (super.noSuchMethod(
            Invocation.getter(#scores),
            returnValue: <String, int>{},
          )
          as Map<String, int>);

  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);

  @override
  _i3.MatchModel copyWith({
    String? id,
    String? player1Id,
    String? player1Username,
    String? player2Id,
    String? player2Username,
    String? invitedFriendId,
    String? status,
    _i2.Timestamp? createdAt,
    _i2.Timestamp? updatedAt,
    bool? isFriendMatch,
    String? currentTurn,
    List<Map<String, dynamic>>? questions,
    Map<String, int>? scores,
    String? winnerId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #id: id,
              #player1Id: player1Id,
              #player1Username: player1Username,
              #player2Id: player2Id,
              #player2Username: player2Username,
              #invitedFriendId: invitedFriendId,
              #status: status,
              #createdAt: createdAt,
              #updatedAt: updatedAt,
              #isFriendMatch: isFriendMatch,
              #currentTurn: currentTurn,
              #questions: questions,
              #scores: scores,
              #winnerId: winnerId,
            }),
            returnValue: _FakeMatchModel_1(
              this,
              Invocation.method(#copyWith, [], {
                #id: id,
                #player1Id: player1Id,
                #player1Username: player1Username,
                #player2Id: player2Id,
                #player2Username: player2Username,
                #invitedFriendId: invitedFriendId,
                #status: status,
                #createdAt: createdAt,
                #updatedAt: updatedAt,
                #isFriendMatch: isFriendMatch,
                #currentTurn: currentTurn,
                #questions: questions,
                #scores: scores,
                #winnerId: winnerId,
              }),
            ),
          )
          as _i3.MatchModel);

  @override
  Map<String, dynamic> toFirestore() =>
      (super.noSuchMethod(
            Invocation.method(#toFirestore, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}
